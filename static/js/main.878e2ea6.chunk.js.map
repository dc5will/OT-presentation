{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","pdf/vrlayout.pdf","pdf/spacedRep.pdf","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","pdfjs","GlobalWorkerOptions","workerSrc","version","App","state","numPages","pageNumber","onDocumentLoadSuccess","document","setState","changePage","offset","prevState","previousPage","nextPage","this","file","vrlayout","onLoadSuccess","height","className","type","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,mBCRzBF,EAAOC,QAAU,IAA0B,sC,2KCA3CD,EAAOC,QAAU,IAA0B,uC,wLCM3CE,QAAMC,oBAAoBC,UAA1B,kDAAiFF,QAAMG,QAAvF,kB,IAEqBC,E,2MACnBC,MAAQ,CACNC,SAAU,KACVC,WAAY,G,EAGdC,sBAAwB,SAAAC,GAAa,IAC3BH,EAAaG,EAAbH,SACR,EAAKI,SAAS,CACZJ,WACAC,WAAY,K,EAIhBI,WAAa,SAAAC,GAAM,OACjB,EAAKF,UAAS,SAAAG,GAAS,MAAK,CAC1BN,WAAYM,EAAUN,WAAaK,O,EAGvCE,aAAe,kBAAM,EAAKH,YAAY,I,EAEtCI,SAAW,kBAAM,EAAKJ,WAAW,I,wEAEvB,IAAD,EAC0BK,KAAKX,MAA9BC,EADD,EACCA,SAAUC,EADX,EACWA,WAElB,OACE,8BACE,kBAAC,WAAD,CAAUU,KAAMC,IAAUC,cAAeH,KAAKR,uBAC5C,kBAAC,OAAD,CAAMD,WAAYA,EAAYa,OAAO,UAEvC,yBAAKC,UAAU,SACb,6BACE,mCACQd,IAAeD,EAAW,EAAI,MADtC,OACiDA,GAAY,MAE7D,4BACEgB,KAAK,SACLC,SAAUhB,GAAc,EACxBiB,QAASR,KAAKF,cAHhB,YAOA,4BACEQ,KAAK,SACLC,SAAUhB,GAAcD,EACxBkB,QAASR,KAAKD,UAHhB,e,GA3CqBU,aCIbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASwB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.878e2ea6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","module.exports = __webpack_public_path__ + \"static/media/vrlayout.ebbdec77.pdf\";","module.exports = __webpack_public_path__ + \"static/media/spacedRep.82301cbc.pdf\";","import React, { Component } from \"react\";\r\nimport { pdfjs, Document, Page } from \"react-pdf\";\r\nimport spacedRep from \"./pdf/spacedRep.pdf\";\r\nimport vrlayout from \"./pdf/vrlayout.pdf\";\r\nimport \"./App.css\";\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    numPages: null,\r\n    pageNumber: 1\r\n  };\r\n\r\n  onDocumentLoadSuccess = document => {\r\n    const { numPages } = document;\r\n    this.setState({\r\n      numPages,\r\n      pageNumber: 1\r\n    });\r\n  };\r\n\r\n  changePage = offset =>\r\n    this.setState(prevState => ({\r\n      pageNumber: prevState.pageNumber + offset\r\n    }));\r\n\r\n  previousPage = () => this.changePage(-1);\r\n\r\n  nextPage = () => this.changePage(1);\r\n\r\n  render() {\r\n    const { numPages, pageNumber } = this.state;\r\n\r\n    return (\r\n      <main>\r\n        <Document file={vrlayout} onLoadSuccess={this.onDocumentLoadSuccess}>\r\n          <Page pageNumber={pageNumber} height='1000'/>\r\n        </Document>\r\n        <div className=\"pages\">\r\n          <div>\r\n            <p>\r\n              Page {pageNumber || (numPages ? 1 : \"--\")} of {numPages || \"--\"}\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              disabled={pageNumber <= 1}\r\n              onClick={this.previousPage}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              disabled={pageNumber >= numPages}\r\n              onClick={this.nextPage}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}